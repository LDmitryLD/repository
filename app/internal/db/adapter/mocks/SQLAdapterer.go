// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"
	adapter "projects/LDmitryLD/repository/app/internal/db/adapter"

	mock "github.com/stretchr/testify/mock"

	tabler "projects/LDmitryLD/repository/app/internal/infrastructure/db/tabler"
)

// SQLAdapterer is an autogenerated mock type for the SQLAdapterer type
type SQLAdapterer struct {
	mock.Mock
}

// BuildSelect provides a mock function with given fields: tableName, condition, fields
func (_m *SQLAdapterer) BuildSelect(tableName string, condition adapter.Condition, fields ...string) (string, []interface{}, error) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, tableName, condition)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	var r1 []interface{}
	var r2 error
	if rf, ok := ret.Get(0).(func(string, adapter.Condition, ...string) (string, []interface{}, error)); ok {
		return rf(tableName, condition, fields...)
	}
	if rf, ok := ret.Get(0).(func(string, adapter.Condition, ...string) string); ok {
		r0 = rf(tableName, condition, fields...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, adapter.Condition, ...string) []interface{}); ok {
		r1 = rf(tableName, condition, fields...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]interface{})
		}
	}

	if rf, ok := ret.Get(2).(func(string, adapter.Condition, ...string) error); ok {
		r2 = rf(tableName, condition, fields...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Create provides a mock function with given fields: ctx, entity, ops
func (_m *SQLAdapterer) Create(ctx context.Context, entity tabler.Tabler, ops ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, entity)
	_ca = append(_ca, ops...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, tabler.Tabler, ...interface{}) error); ok {
		r0 = rf(ctx, entity, ops...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, tablename, id
func (_m *SQLAdapterer) Delete(ctx context.Context, tablename string, id int) error {
	ret := _m.Called(ctx, tablename, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, tablename, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx, dest, table, condition, opts
func (_m *SQLAdapterer) List(ctx context.Context, dest interface{}, table tabler.Tabler, condition adapter.Condition, opts ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, dest, table, condition)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, tabler.Tabler, adapter.Condition, ...interface{}) error); ok {
		r0 = rf(ctx, dest, table, condition, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, entity, condition, ops
func (_m *SQLAdapterer) Update(ctx context.Context, entity tabler.Tabler, condition adapter.Condition, ops ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, entity, condition)
	_ca = append(_ca, ops...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, tabler.Tabler, adapter.Condition, ...interface{}) error); ok {
		r0 = rf(ctx, entity, condition, ops...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSQLAdapterer creates a new instance of SQLAdapterer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSQLAdapterer(t interface {
	mock.TestingT
	Cleanup(func())
}) *SQLAdapterer {
	mock := &SQLAdapterer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
